{"version":3,"sources":["data.ts","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["data","applicationId","appStatus","childForms","id","name","type","externalClassName","fields","description","displayName","isRequired","isReadOnly","selectListItems","maxLength","value","horizontalRadio","radioButtonOptions","errorAlerts","warningAlerts","App","onSubmit","useCallback","viewModel","console","log","onBackButton","requestModel","handleBack","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8LAEaA,EAAqB,CAChCC,cAAe,kBACfC,UAAW,IACXC,WAAY,CACV,CACEC,GAAI,uCACJC,KAAM,UACNC,KAAM,WACNC,kBAAmB,GACnBC,OAAQ,CACN,CACEC,YAAa,GACbC,YAAa,KACbJ,KAAM,GACNK,YAAY,EACZC,YAAY,EACZC,gBAAiB,GACjBC,UAAW,EACXT,KAAM,QACNU,MAAO,IAET,CACEN,YAAa,GACbC,YAAa,WACbJ,KAAM,GACNK,YAAY,EACZC,YAAY,EACZC,gBAAiB,GACjBG,iBAAiB,EACjBC,mBAAoB,GAEpBC,YAAa,KACbC,cAAe,KACfd,KAAM,UACNU,MAAO,IAET,CACEN,YAAa,GACbC,YAAa,UACbJ,KAAM,GACNK,YAAY,EACZC,YAAY,EACZC,gBAAiB,GACjBG,iBAAiB,EACjBC,mBAAoB,GAEpBC,YAAa,KACbC,cAAe,KACfd,KAAM,SACNU,MAAO,IAET,CACEN,YAAa,GACbC,YAAa,YACbJ,KAAM,GACNK,YAAY,EACZC,YAAY,EACZC,gBAAiB,GACjBG,iBAAiB,EACjBC,mBAAoB,GAEpBC,YAAa,KACbC,cAAe,KACfd,KAAM,YACNU,MAAO,Q,OC3CFK,MAnBf,WACE,IAAMC,EAAWC,uBAAY,SAACC,GAC5BC,QAAQC,IAAIF,KACX,IAEGG,EAAeJ,uBAAY,cAAU,IAE3C,OACE,8BACE,cAAC,IAAD,CACEK,aAAc3B,EACdG,WAAYH,EAAKG,WACjBkB,SAAUA,EACVO,WAAYF,OCHLG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BlB,IDmHM,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAACmB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.a413c9c9.chunk.js","sourcesContent":["import { RequestModel } from \"@curo/dynamic-ui-components\"\r\n\r\nexport const data: RequestModel = {\r\n  applicationId: \"CARD-0000000334\",\r\n  appStatus: \"3\",\r\n  childForms: [\r\n    {\r\n      id: \"1cfcd6ec-c5be-47c9-8cfa-3999467a0cf7\",\r\n      name: \"cardApp\",\r\n      type: \"editable\",\r\n      externalClassName: \"\",\r\n      fields: [\r\n        {\r\n          description: \"\",\r\n          displayName: \"id\",\r\n          type: 24,\r\n          isRequired: false,\r\n          isReadOnly: false,\r\n          selectListItems: [],\r\n          maxLength: 0,\r\n          name: \"Mitek\",\r\n          value: \"\",\r\n        },\r\n        {\r\n          description: \"\",\r\n          displayName: \"ID Front\",\r\n          type: 11,\r\n          isRequired: true,\r\n          isReadOnly: false,\r\n          selectListItems: [],\r\n          horizontalRadio: false,\r\n          radioButtonOptions: [],\r\n\r\n          errorAlerts: null,\r\n          warningAlerts: null,\r\n          name: \"IDFront\",\r\n          value: \"\",\r\n        },\r\n        {\r\n          description: \"\",\r\n          displayName: \"ID Back\",\r\n          type: 11,\r\n          isRequired: false,\r\n          isReadOnly: false,\r\n          selectListItems: [],\r\n          horizontalRadio: false,\r\n          radioButtonOptions: [],\r\n\r\n          errorAlerts: null,\r\n          warningAlerts: null,\r\n          name: \"IDBack\",\r\n          value: \"\",\r\n        },\r\n        {\r\n          description: \"\",\r\n          displayName: \"IDBarcode\",\r\n          type: 11,\r\n          isRequired: false,\r\n          isReadOnly: false,\r\n          selectListItems: [],\r\n          horizontalRadio: false,\r\n          radioButtonOptions: [],\r\n\r\n          errorAlerts: null,\r\n          warningAlerts: null,\r\n          name: \"IDBarcode\",\r\n          value: \"\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n}\r\n","import { DynamicForm } from \"@curo/dynamic-ui-components\"\r\nimport { useCallback } from \"react\"\r\nimport { data } from \"./data\"\r\n\r\nfunction App() {\r\n  const onSubmit = useCallback((viewModel: any) => {\r\n    console.log(viewModel)\r\n  }, [])\r\n\r\n  const onBackButton = useCallback(() => {}, [])\r\n\r\n  return (\r\n    <div>\r\n      <DynamicForm\r\n        requestModel={data}\r\n        childForms={data.childForms}\r\n        onSubmit={onSubmit}\r\n        handleBack={onBackButton}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { unregister } from \"./serviceWorkerRegistration\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\nunregister()"],"sourceRoot":""}